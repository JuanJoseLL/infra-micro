trigger:
  branches:
    include:
    - develop
    - main
  paths:
    include:
    - '**/*.tf'
    - 'azure-pipelines.yml'

pool:
  vmImage: ubuntu-latest

variables:
  - name: environment
    ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
      value: 'prod'
    ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
      value: 'dev'
    ${{ if not(or(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'develop'))) }}:
      value: 'feature'
  - name: terraformVersion
    value: '1.5.7'
  - group: terraform-variables-${{ variables.environment }}

stages:
- stage: Validate
  displayName: Validate Infrastructure
  jobs:
  - job: TerraformValidate
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(terraformVersion)'
    
    - task: Bash@3
      displayName: 'Setup SSH Key'
      inputs:
        targetType: 'inline'
        script: |
          # Create .ssh directory
          mkdir -p ~/.ssh
          echo "$$SSH_PUBLIC_KEY" > ~/.ssh/azure_aks.pub
          chmod 644 ~/.ssh/azure_aks.pub
          echo "SSH key configured"
      env:
        SSH_PUBLIC_KEY: $(sshPublicKey)
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'Azure-Service-Connection'
        backendAzureRmResourceGroupName: 'terraform-state-rg'
        backendAzureRmStorageAccountName: 'tfstoragemicrosvc'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: '$(environment).terraform.tfstate'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: 'Azure-Service-Connection'
        commandOptions: '-out=$(System.DefaultWorkingDirectory)/terraform.tfplan -var="prefix=$(resourcePrefix)-$(environment)" -var="common_tags={\"environment\":\"$(environment)\",\"project\":\"MicroserviceApp\"}"'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Terraform Plan'
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/terraform.tfplan'
        artifactName: 'terraform-plan'
        
- stage: Apply
  displayName: Apply Infrastructure
  dependsOn: Validate
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), or(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'develop')))
  jobs:
  - job: TerraformApply
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(terraformVersion)'
    
    - task: Bash@3
      displayName: 'Setup SSH Key'
      inputs:
        targetType: 'inline'
        script: |
          # Create .ssh directory
          mkdir -p ~/.ssh
          echo "$$SSH_PUBLIC_KEY" > ~/.ssh/azure_aks.pub
          chmod 644 ~/.ssh/azure_aks.pub
          echo "SSH key configured!"
      env:
        SSH_PUBLIC_KEY: $(sshPublicKey)
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'Azure-Service-Connection'
        backendAzureRmResourceGroupName: 'terraform-state-rg'
        backendAzureRmStorageAccountName: 'tfstoragemicrosvc'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: '$(environment).terraform.tfstate'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Terraform Plan'
      inputs:
        artifactName: 'terraform-plan'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceNameAzureRM: 'Azure-Service-Connection'
        commandOptions: '$(System.DefaultWorkingDirectory)/terraform.tfplan'
    
    - task: Bash@3
      displayName: 'Verify Deployment'
      inputs:
        targetType: 'inline'
        script: |
          echo "Verifying AKS deployment..."
          az login --service-principal -u $(servicePrincipalId) -p $(servicePrincipalKey) --tenant $(tenantId)
          az account set --subscription $(subscriptionId)
          
          # Get resource group name dynamically
          RG_NAME=$(terraform output -json | jq -r '.resource_group_name.value')
          
          # Verify AKS cluster exists
          AKS_NAME=$(terraform output -json | jq -r '.kubernetes_cluster_name.value')
          AKS_STATUS=$(az aks show --name $AKS_NAME --resource-group $RG_NAME --query provisioningState -o tsv)
          echo "AKS Cluster Status1: $AKS_STATUS"
          
          if [ "$AKS_STATUS" != "Succeeded" ]; then
            echo "AKS deployment not successful.234 Current state: $AKS_STATUS"
            exit 1
          fi
          
          echo "All resources deployed successfully!"
    
    - task: Bash@3
      displayName: 'Wait 30 seconds before destroying resources'
      inputs:
        targetType: 'inline'
        script: |
          echo "Resources created successfully! Waiting 30 seconds before destroying..."
          sleep 30
          echo "Wait complete. Proceeding with resource destruction test12..."
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Destroy'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        environmentServiceNameAzureRM: 'Azure-Service-Connection'
        commandOptions: '-auto-approve -var="prefix=$(resourcePrefix)-$(environment)" -var="common_tags={\"environment\":\"$(environment)\",\"project\":\"MicroserviceApp\"}"'